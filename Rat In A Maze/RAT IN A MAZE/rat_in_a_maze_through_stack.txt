#include <iostream>
#include<ctime>
#include<cstdlib>
#include "myconsole.h"
#include "mygraphics.h"
#include<Windows.h>
using namespace std;

template<class T>
class linkedlist {
public:
	class node {
	private:
		T data;
		node* next;
		friend class linkedlist<T>;
	public:
		node(T Val) {
			data = Val;
			next = NULL;
		}
	};
	class listiterator {
	protected:
		node* current;
		friend class linkedlist<T>;
	public:
		listiterator() {
			current = NULL;
		}
		listiterator(node* temp) {
			current = temp; // called in begin()
			// called in end()
		}
		T& operator*() {
			return current->data;
		}
		bool operator==(listiterator rhs) {
			return (current == rhs.current);
		}
		bool operator!=(listiterator rhs) {
			return (current != rhs.current);
		}
		listiterator& operator++() {
			if (current != NULL) {
				current = current->next;
			}

			return *this;
		}
		listiterator operator++(int) {
			listiterator temp = *this;
			if (current != NULL) {
				current = current->next;
			}

			return temp;
		}

	};
	void gettop(T& val) {
		if (head == NULL) {
			cout << "Already NULL...." << endl;
		}
		else {
			node* temp = head;
			val = head->data;

		}
	}
	listiterator begin() {
		return head;
	}
	listiterator end() {
		return nullptr;
	}
	linkedlist() {
		head = NULL;
	}
	void insert_at_head(T val) {
		node* create = new node(val);
		if (head == NULL) {
			head = create;
			create->next = NULL;

		}
		else {
			create->next = head;
			head = create;

		}
	}
	void display() {
		node* temp = head;
		while (temp != NULL) {
			cout << temp->data << " ,";
			temp = temp->next;
		}
	}
	void delete_from_head() {
		if (head == NULL) {
			cout << "Already NULL...." << endl;
		}
		else {
			node* temp = head;
			head = head->next;
			delete temp;
		}
	}
	bool isempty() {
		if (head == NULL) {
			return 1;
		}
		else {
			return 0;
		}
	}
private:
	node* head;

};
template<class T>
class stack {
	linkedlist<T>* stk;
	int size;
public:
	stack(int s) {
		stk = new linkedlist<T>;
		size = s;
	}
	void push(T val) {
		stk->insert_at_head(val);
	}
	bool tops(T& val) {
		stk->gettop(val);
		return 1;
	}
	bool pop() {
		bool check = 0;
		if (!stk->isempty()) {
			stk->delete_from_head();
			check = 1;
		}
		else {
			cout << "Emptyyyy>>>>>" << endl;
			check = 0;
		}
		return check;
	}
	bool isemptystack() {
		return stk->isempty();
	}
	~stack() {
		delete stk;
	}
	int getsize() {
		return size;
	}
	void displaystack() {
		stk->display();
	}
};



class ratinamaze {
	int** arr;
	int rows;
	int columns;
	int noofblockages;
	stack<int>* stk1;
	stack<int>* stk2;

public:
	ratinamaze(int rows, int columns, int blockage) {
		stk1 = new stack<int>(rows * columns);
		stk2 = new stack<int>(rows * columns);
		this->rows = rows;
		this->columns = columns;
		noofblockages = blockage;
		arr = new int* [rows];
		int randomrow;
		int randomcolumn;
		for (int i = 0;i < rows;i++) {
			arr[i] = new int[columns];
		}
	
		for (int i = 0;i < rows;i++) {
			for (int j = 0;j < columns;j++) {
				arr[i][j] = 0;
			}
		}
		//myRect(0, 0, 1, 1, RGB(0, 0, 255), RGB(0, 0, 255));
		srand(time(NULL));
		for (int i = 0;i < noofblockages;i++) {

			randomrow = rand() % rows;
			randomcolumn = rand() % columns;
			arr[randomrow][randomcolumn] = 1;
		}
	}
	void setsource(int index1, int index2) {
		arr[index1][index2] = 2;

	}
	void setdestination(int index1, int index2) {
		arr[index1][index2] = 3;
	}
	void getsource(int& ir, int& jc) {
		for (int i = 0;i < rows;i++) {
			for (int j = 0;j < columns;j++) {
				if (arr[i][j] == 2) {
					ir = i;
					jc = j;
				}
			}
		}
	}
	

	bool checkwinningcondition(int i, int j) {
		if (arr[i][j] == 3) {
			return 1;
		}
		else {
			return 0;
		}
	}
	
	void startgame2() {
		int i = 2;
		int j = 2;
		getsource(i, j);
		int win = 0;
		bool move = 0;
		int countstuck = 0;
		bool obstacle = 0;
	
		

		system("cls");

		while (!win) {


			if (j < columns - 1 && i<rows&&arr[i][j + 1] !=1) { // toward right
				while (!obstacle && !win) {
					if (j < columns - 1 && arr[i][j + 1] != 1 && arr[i][j + 1] != 2) {
						countstuck = 0;
						stk1->push(i);
						stk2->push(j);
						j++;
						win = checkwinningcondition(i, j);
						move = 1;
						arr[i][j] = 2;
						obstacle = 0;
					//	system("cls");
						print();
						
						//display();
						Sleep(500);
					}
					else if (arr[i][j + 1] == 1 || arr[i][j + 1] == 2 || j == columns - 1) {
						obstacle = 1;
					}

				}
				obstacle = 0;

			}
			if (i < rows - 1 &&j<columns&& arr[i + 1][j] == 0) { // towards down
				while (!obstacle && !win) {
					if (i < rows - 1 && arr[i + 1][j] != 1 && arr[i + 1][j] != 2) {
						if (i + 1 <= rows && arr[i + 1][j] != 1) {
							countstuck = 0;
							stk1->push(i);
							stk2->push(j);
							i++;
							move = 1;
							win = checkwinningcondition(i, j);
							arr[i][j] = 2;
							obstacle = 0;
						//	system("cls");
							print();
							
							//display();
							Sleep(500);
						}
						else {
							obstacle = 1;
						}

					}
					else if (i == rows - 1 || arr[i + 1][j] == 2 || arr[i + 1][j] == 1) {
						obstacle = 1;
					}


				}
				obstacle = 0;
			}
			if (j >= 1 && i<rows&&arr[i][j - 1] != 1 && arr[i][j-1]!=2) { // toward left
				while (!obstacle && !win) {
					if (arr[i][j - 1] == 1 || arr[i][j - 1] == 2 || j == 1) {
						obstacle = 1;
					}
					else if (j >= 1 && arr[i][j - 1] !=1 && arr[i][j - 1] != 2) {
						countstuck = 0;
						stk1->push(i);
						stk2->push(j);

						j--;
						win = checkwinningcondition(i, j);

						move = 1;
						arr[i][j] = 2;
						obstacle = 0;
					//	system("cls");
						print();
						//ClearScreen();
						//display();
						Sleep(500);
					}


				}
				obstacle = 0;
			}
			// update this conditions
			if (j == 1 && arr[i][j - 1] == 0) {
				countstuck = 0;
				stk1->push(i);
				stk2->push(j);

				j--;
				win = checkwinningcondition(i, j);

				move = 1;
				arr[i][j] = 2;
				obstacle = 0;
			//	system("cls");
				print();
				//ClearScreen();
				//display();
				Sleep(500);
			}
			if (i >= 1 && arr[i - 1][j] == 0) {   //up
				while (!obstacle && !win) {
				    if (arr[i - 1][j] == 2 || i == 1 || arr[i - 1][j] == 1) {
						obstacle = 1;
					}
					else if (i >= 1 && arr[i - 1][j] != 1 && arr[i - 1][j] != 2) {
						countstuck = 0;
						stk1->push(i);
						stk2->push(j);

						i--;
						win = checkwinningcondition(i, j);

						move = 1;
						arr[i][j] = 2;
						obstacle = 0;
					//	system("cls");
						print();
						//ClearScreen();
						//display();
						Sleep(500);
					 }
					

				}
				obstacle = 0;
			}
			// update this if for 0 roww
			if (i == 1 && arr[i - 1][j] == 0) {
				countstuck = 0;
				stk1->push(i);
				stk2->push(j);

				i--;
				win = checkwinningcondition(i, j);

				move = 1;
				arr[i][j] = 2;
				obstacle = 0;
			//	system("cls");
				print();
				//ClearScreen();
				//display();
				Sleep(500);
			}
			//else {
				//cout << "STUCK" << endl;
				countstuck++;
				if (countstuck > 1) {
					countstuck = 0;
					arr[i][j] = 1;
					int temp1 = 0;
					int temp2 = 0;
					stk1->tops(temp1);
					stk2->tops(temp2);
					i = temp1;
					j = temp2;
					arr[i][j] = 2;
					stk1->pop();
					stk2->pop();
				//	system("cls");
					print();
					//ClearScreen();
					//display();
					Sleep(500);
				}
				//system("pause");
			//}
		}
		if (win == 1) {
			char arr[] = "REACHED FINALLY";
			myDrawTextWithFont(50, 100, 200, arr, RGB(200, 0, 200), RGB(3, 200, 3));
			Sleep(3000);
			system("pause");

		}
	}
	void print() {
		int x1 = 200;
		int x2 = x1+20;
		int y1 = 10;
		int y2 = y1 + 20;
		for (int i = 0;i < rows;i++) {
			for (int j = 0;j < columns;j++) {
				if (arr[i][j] == 0) {
					myRect(x1, y1, x2, y2, RGB(192, 192, 192), RGB(192, 192, 192));
					x1 = x2+20;
					x2 = x1 + 20;
				
					//Sleep(1000);
				}
				else if (arr[i][j] == 1) {
					myRect(x1, y1, x2, y2, RGB(255, 0, 0), RGB(255, 0, 0));
					x1 = x2 + 20;
					x2 = x1 + 20;
				
					
					//Sleep(1000);
				}
				else if (arr[i][j] == 2) {
					myRect(x1, y1, x2, y2, RGB(0, 0, 0), RGB(0, 255, 0)); // 255 0 255
					x1 = x2 + 20;
					x2 = x1 + 20;
				
					
					//Sleep(1000);

				}
				else if (arr[i][j] == 3) {
					myRect(x1, y1, x2, y2, RGB(255, 255, 255), RGB(0, 0, 255));
					x1 = x2 + 20;
					x2 = x1 + 20;
				}
			}
			y1 = y2 + 20;
			y2 = y1 + 20;
			x1 = 200;
			x2 = x1 + 20;
		}
	}
	void display() {
		// 2 stands for source;
		// 3 stands for destination;
		for (int i = 0;i < rows;i++) {
			for (int j = 0;j < columns;j++) {
				cout << arr[i][j] << " ";
			}
			cout << endl;
		}
	}
};




void printSquarewithPixels(int s, int e) {
	while (s < e) {
		int i = s, j = s;
		while (i < e)
		{
			mySetPixel(i++, j, RGB(0, 0, 255));
		}
		while (j < e)
		{
			mySetPixel(i, j++, RGB(0, 255, 0));
		}
		while (i >= s)
		{
			mySetPixel(i--, j, RGB(255, 0, 0));
		}
		while (j >= s)
		{
			mySetPixel(i, j--, RGB(255, 255, 0));
		}
		s += 5; e -= 5;
	}

}

void main(){

	ratinamaze obj(10, 10, 20);
	obj.setsource(5, 5);
	obj.setdestination(3, 2);
	obj.display();
	system("pause");
 	obj.startgame2();
	obj.display();
	system("pause");
}

