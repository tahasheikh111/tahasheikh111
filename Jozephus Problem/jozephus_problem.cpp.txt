#include <iostream>
#include "myconsole.h"
#include "mygraphics.h"

#include<Windows.h>
#include<ctime>
#include<stdlib.h>
using namespace std;
template<class T>
class linkedlist {
public:
	class node {
	private:
		T data;
		node* next;
		friend class linkedlist<T>;
	public:
		node(T Val) {
			data = Val;
			next = NULL;
		}
	};
	class listiterator {
	protected:
		node* current;
		friend class linkedlist<T>;
	public:
		listiterator() {
			current = NULL;
		}
		listiterator(node* temp) {
			current = temp; // called in begin()
			// called in end()
		}
		T& operator*() {
			return current->data;
		}
		bool operator==(listiterator rhs) {
			return (current == rhs.current);
		}
		bool operator!=(listiterator rhs) {
			return (current != rhs.current);
		}
		listiterator& operator++() {
			if (current != NULL) {
				current = current->next;
			}

			return *this;
		}
		listiterator operator++(int) {
			listiterator temp = *this;
			if (current != NULL) {
				current = current->next;
			}

			return temp;
		}

	};
	listiterator begin() {
		return head;
	}
	listiterator end() {
		return nullptr;
	}
	linkedlist() {
		head = NULL;
	}
	void insert_at_head(T val) {
		node* create = new node(val);
		if (head == NULL) {
			head = create;
			create->next = NULL;

		}
		else {
			create->next = head;
			head = create;

		}
	}
	void insert_at_tail(T val) {
		node* create = new node(val);

		if (head == NULL) {
			insert_at_head(val);
		}
		else {
			node* temp = head;
			while (temp->next != NULL) {
				temp = temp->next;
			}
			temp->next = create;
		}



	}
	void display2() {
		char arr[20];
		int x = 50;
		int y = 30;
		node* temp = head;
		while (temp != NULL) {
			sprintf_s(arr, "%d", temp->data);
			myDrawTextWithFont(x, y, 40, arr, RGB(255, 120, 110), RGB(110, 255, 110));
			x = x + 40;
			temp = temp->next;
		}

	}
	void display() {
		node* temp = head;
		while (temp != NULL) {
			cout << temp->data << " ,";
			temp = temp->next;
		}
	}
	void delete_from_head() {
		if (head == NULL) {
			cout << "Already NULL...." << endl;
		}
		else {

			if (head->next != NULL) {
				node* temp = head;
				head = head->next;
				delete temp;
			}
			else {
				head = NULL;
			}

		}
	}
	int getcount() {
		int count = 0;
		node* temp = head;
		while (temp != NULL) {
			temp = temp->next;
			count++;
		}
		return count;

	}
	void gethead(int& val) {
		val = head->data;
	}
	bool isempty() {
		if (head == NULL) {
			return 1;
		}
		else {
			return 0;
		}
	}

private:
	node* head;

};
template<class T>
class queue {
	linkedlist<T> que;
public:
	queue() {

	}
	bool enqueue(T val) {
		que.insert_at_tail(val);
		return 1;
	}
	bool isempty() {
		return que.isempty();
	}
	void gettop(int& val) {
		que.gethead(val);
	}
	bool dequeue() {

		if (que.isempty() == 1) {
			return 0;
		}
		else {
			que.delete_from_head();
			return 1;
		}
	}
	void print() {
		// cout << "front" << "         " << "rear" << endl;
		// cout << "|                |" << endl;
		que.display2();
	}
};
class jozephus {
	int numberofpeople;
	int skip;
	int startingpoint;
	queue<int>* que;
public:
	jozephus(int no, int k) {
		startingpoint = 0;
		numberofpeople = no;
		skip = k;
		que = new queue<int>;
		int i = 1;
		for (;i <= numberofpeople;i++) {
			que->enqueue(i);
		}
	}

	void startexecution() {
		int count = numberofpeople - 1;
		int val = 0;
		int i = 0;
		cout << "STARTING POINT : "<<startingpoint << endl;
		system("pause");
		for (int i = 1;i <= startingpoint;i++) {
			que->gettop(val);
			que->dequeue();
			que->enqueue(val);
			// system("cls");
			// print();
			// Sleep(1000);
			display();
		}
		cout << "MOVING TOWARD STARTING POSITION" << endl;
		system("pause");
		while (count != 0) {
			for (int i = 0;i < skip;) {
				que->gettop(val);
				que->dequeue();
				que->enqueue(val);
				//system("cls");
				//print();
				//Sleep(1000);
				display();
				i = (i + 1) % numberofpeople;
			}
			count--;
			char arr[] = "KILL";
			myDrawTextWithFont(200, 200, 200, arr, RGB(0, 255, 0), RGB(120, 200, 200));
			Sleep(1000);
			que->dequeue();
			//system("cls");
			//print();
			//Sleep(1000);
			display();


		}

	}
	void setrandomstartingpoint() {
		int value = 0;
		srand(time(NULL));
		value = rand() % numberofpeople - 1;
		setstartingpoint(value);
	}
	void print() {
		int x1 = 200;
		int y1 = 30;
	
		for (int i = 1;i <= numberofpeople;i++) {
		    if (i  == numberofpeople/2) {
				char arr[20];
				
				sprintf_s(arr, "%d", i);
				myDrawTextWithFont(20,y1+100 ,10, arr,RGB(0,255,0),RGB(0,0,255));
				//myEllipse(tempx1, tempy1+250, tempx2, tempy2+250, RGB(255, 0, 0), RGB(0, 255, 0));
				
				//Sleep(1000);
				
			}
			else if(i<numberofpeople/2) {
				char arr[20];

				sprintf_s(arr, "%d", i);
				myDrawTextWithFont(x1, y1 , 10, arr, RGB(0, 255, 0), RGB(0, 0, 255));
				x1 = x1 + 15;
				y1 = y1 + 15;
				

				//myEllipse(x1, y1, x2, y2, RGB(255,0,0),RGB(0,255,0));
				//myRect(x1, y1, x2, y2, RGB(9, 255, 9), RGB(8, 222, 8));
				//Sleep(1000);
				
			}
			else if (i > numberofpeople / 2) {
				char arr[20];

				sprintf_s(arr, "%d", i);
				myDrawTextWithFont(x1, y1, 10, arr, RGB(0, 255, 0), RGB(0, 0, 255));
				x1 = x1 - 15;
				y1 = y1 - 15;


				// myEllipse(x1, y1, x2, y2, RGB(255, 0, 0), RGB(0, 255, 0));
				// myRect(x1, y1, x2, y2, RGB(9, 255, 9), RGB(8, 222, 8));
				//Sleep(1000);
				
			}
			
		}
	}


	void display() {
		system("cls");
		que->print();
		Sleep(1000);

	}
	void setstartingpoint(int val) {
		startingpoint = val;
	}

};
int main() {
	int people = 0;
	int skips = 0;
	cout << "NUMBER OF PEOPLE : ";
	cin >> people;
	cout << "\n SKIPS NUMBER OF PERSON : ";
	cin >> skips;
	jozephus obj(people, skips);
	obj.display();
	obj.setrandomstartingpoint();
	//obj.setstartingpoint(5);
	obj.startexecution();
	system("pause");
}



